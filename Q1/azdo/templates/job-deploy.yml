parameters:
  env: ""
  azuresubscription: ""
  webappname: ""
  webapiname: ""
  apps: []

jobs:
  - deployment: deployNetCoreToLinux
    displayName: Deploy Web Api
    environment: ${{ parameters.env }}
    pool:
      name: Default
    strategy:
      runOnce:
        deploy:
          steps:
            - task: AzureRmWebAppDeployment@4
              displayName: "Deploy API"
              inputs:
                azureSubscription: ${{ parameters.azuresubscription }}
                appType: webAppLinux
                WebAppName: ${{ parameters.webapiname }}
                packageForLinux: "$(Pipeline.Workspace)/${{ parameters.artifactname }}/**/FastCarzWebApi.zip"
                RemoveAdditionalFilesFlag: true
                ExcludeFilesFromAppDataFlag: true
                TakeAppOfflineFlag: true
            - task: AzureRmWebAppDeployment@4
              displayName: "Deploy Web App"
              inputs:
                azureSubscription: ${{ parameters.azuresubscription }}
                appType: webAppLinux
                WebAppName: ${{ parameters.webappname }}
                packageForLinux: "$(Pipeline.Workspace)/${{ parameters.artifactname }}/**/FastCarzWebApp.zip"
                RemoveAdditionalFilesFlag: true
                ExcludeFilesFromAppDataFlag: true
                TakeAppOfflineFlag: true
  - ${{ each app in parameters.apps }}:
    - job: Owasp${{ replace(app, '-', '_') }}
      displayName: Owasp Test On ${{ app }}
      dependsOn: deployNetCoreToLinux
      pool:
        name: Default
        demands:
          agent.os -equals Linux
      steps:
        - bash: |
            mkdir owaspzap
            chmod 777 owaspzap
            pwd 
            ls -lrt
          displayName: Create owaspzap directory
        - task: owaspzap@1
          inputs:
            aggressivemode: true
            scantype: "targetedScan"
            url: "https://${{ app }}.azurewebsites.net"
        - bash: |
            npm install -g handlebars-cmd

            cat <<EOF > owaspzap/nunit-template.hbs
            {{#each site}}
            <test-run id="2" name="Owasp test" start-time="{{../[@generated]}}">
                <test-suite id="{{@index}}" type="Assembly" name="{{[@name]}}" result="Failed" failed="{{alerts.length}}">
                    <attachments>
                        <attachment>
                            <filePath>$(System.DefaultWorkingDirectory)/owaspzap/report.html</filePath>
                        </attachment>
                    </attachments>
                    {{#each alerts}}
                    <test-case id="{{@index}}" name="{{alert}}" result="Failed" fullname="{{alert}}" time="1">
                        <failure>
                            <message>
                                <![CDATA[{{{desc}}}]]>
                            </message>
                            <stack-trace>
                                <![CDATA[
                      Solution:
                      {{{solution}}}

                      Reference:
                      {{{reference}}}

                      instances:{{#each instances}}
                      * {{uri}}
                          - {{method}}
                          {{#if evidence}}- {{{evidence}}}{{/if}}
                                          {{/each}}]]>
                            </stack-trace>
                        </failure>
                    </test-case>
                    {{/each}}
                </test-suite>
            </test-run>
            {{/each}}

            EOF
          displayName: "owasp nunit template"
          condition: always()
        - bash: " handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml"
          displayName: "generate nunit type file"
          condition: always()
        - task: PublishTestResults@2
          displayName: "Publish Test Results **/TEST-*.xml"
          inputs:
            testResultsFormat: NUnit
            testResultsFiles: "**/test-results.xml"
            searchFolder: "$(System.DefaultWorkingDirectory)/owaspzap"
          condition: always()

parameters:
  azuresubscription: ""
  staterg: ""
  statesa: ""
  statecaontainer: ""
  backendazuremkey: ""
  configdir: ""
  securitykv: ""

jobs:
  - job: Terraform
    pool:
      name: Default
      demands:
        agent.os -equals Linux

    steps:
      - task: AzureKeyVault@1
        inputs:
          azureSubscription: '${{ parameters.azuresubscription }}'
          keyVaultName: '${{ parameters.securitykv }}'
          secretsFilter: '*'
      - task: TerraformCLI@0
        displayName: Init
        inputs:
          backendType: 'azurerm'
          command: 'init'
          backendServiceArm: '${{ parameters.azuresubscription }}'
          backendAzureRmResourceGroupName: '${{ parameters.staterg }}'
          backendAzureRmStorageAccountName: '${{ parameters.statesa }}'
          backendAzureRmContainerName: '${{ parameters.statecaontainer }}'
          backendAzureRmKey: '${{ parameters.backendazuremkey }}'
          workingDirectory: '${{ parameters.configdir }}'
          allowTelemetryCollection: true
        env:
          TF_IN_AUTOMATION: 'True'
          tenant_id: '$(tenant-id)'
          subscription_id: '$(subscription-id)'
          client_id: '$(client-id)'
          client_secret: '$(client-secret)'
      
      - task: TerraformCLI@0
        displayName: Apply
        inputs:
          backendType: 'azurerm'
          command: 'apply'
          backendServiceArm: '${{ parameters.azuresubscription }}'
          backendAzureRmResourceGroupName: '${{ parameters.staterg }}'
          backendAzureRmStorageAccountName: '${{ parameters.statesa }}'
          backendAzureRmContainerName: '${{ parameters.statecaontainer }}'
          backendAzureRmKey: '${{ parameters.backendazuremkey }}'
          workingDirectory: '${{ parameters.configdir }}'
          allowTelemetryCollection: true
        env:
          TF_IN_AUTOMATION: 'True'
          tenant_id: '$(tenant-id)'
          subscription_id: '$(subscription-id)'
          client_id: '$(client-id)'
          client_secret: '$(client-secret)'